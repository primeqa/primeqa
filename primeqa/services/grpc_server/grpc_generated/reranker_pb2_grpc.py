# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import reranker_pb2 as reranker__pb2


class RerankerServiceStub(object):
    """*
    Service to rerank documents given a query
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRerankers = channel.unary_unary(
                '/rerank.RerankerService/GetRerankers',
                request_serializer=reranker__pb2.GetRerankersRequest.SerializeToString,
                response_deserializer=reranker__pb2.GetRerankersResponse.FromString,
                )
        self.Rerank = channel.unary_unary(
                '/rerank.RerankerService/Rerank',
                request_serializer=reranker__pb2.RerankRequest.SerializeToString,
                response_deserializer=reranker__pb2.RerankResponse.FromString,
                )


class RerankerServiceServicer(object):
    """*
    Service to rerank documents given a query
    """

    def GetRerankers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rerank(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RerankerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRerankers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRerankers,
                    request_deserializer=reranker__pb2.GetRerankersRequest.FromString,
                    response_serializer=reranker__pb2.GetRerankersResponse.SerializeToString,
            ),
            'Rerank': grpc.unary_unary_rpc_method_handler(
                    servicer.Rerank,
                    request_deserializer=reranker__pb2.RerankRequest.FromString,
                    response_serializer=reranker__pb2.RerankResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rerank.RerankerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RerankerService(object):
    """*
    Service to rerank documents given a query
    """

    @staticmethod
    def GetRerankers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rerank.RerankerService/GetRerankers',
            reranker__pb2.GetRerankersRequest.SerializeToString,
            reranker__pb2.GetRerankersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Rerank(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rerank.RerankerService/Rerank',
            reranker__pb2.RerankRequest.SerializeToString,
            reranker__pb2.RerankResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
