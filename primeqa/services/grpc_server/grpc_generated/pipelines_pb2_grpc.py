# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import pipelines_pb2 as pipelines__pb2


class PipelinesStub(object):
    """*
    Service to inform all available models on the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPipelines = channel.unary_stream(
                '/pipelines.Pipelines/GetPipelines',
                request_serializer=pipelines__pb2.GetPipelinesRequest.SerializeToString,
                response_deserializer=pipelines__pb2.Pipeline.FromString,
                )
        self.GetPipeline = channel.unary_unary(
                '/pipelines.Pipelines/GetPipeline',
                request_serializer=pipelines__pb2.GetPipelineRequest.SerializeToString,
                response_deserializer=pipelines__pb2.Pipeline.FromString,
                )


class PipelinesServicer(object):
    """*
    Service to inform all available models on the server
    """

    def GetPipelines(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPipeline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PipelinesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPipelines': grpc.unary_stream_rpc_method_handler(
                    servicer.GetPipelines,
                    request_deserializer=pipelines__pb2.GetPipelinesRequest.FromString,
                    response_serializer=pipelines__pb2.Pipeline.SerializeToString,
            ),
            'GetPipeline': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPipeline,
                    request_deserializer=pipelines__pb2.GetPipelineRequest.FromString,
                    response_serializer=pipelines__pb2.Pipeline.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pipelines.Pipelines', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Pipelines(object):
    """*
    Service to inform all available models on the server
    """

    @staticmethod
    def GetPipelines(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pipelines.Pipelines/GetPipelines',
            pipelines__pb2.GetPipelinesRequest.SerializeToString,
            pipelines__pb2.Pipeline.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPipeline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pipelines.Pipelines/GetPipeline',
            pipelines__pb2.GetPipelineRequest.SerializeToString,
            pipelines__pb2.Pipeline.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
